{"version":3,"file":"static/js/545.eed02aec.chunk.js","mappings":"kKAwBA,EArBqB,SAAHA,GAAA,IAAMC,EAAID,EAAJC,KAAMC,EAAQF,EAARE,SAAUC,EAAKH,EAALG,MAAOC,EAAOJ,EAAPI,QAAO,OACpDC,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,KAAGE,KAAON,EAAOO,UAAU,mBAAkBF,UAC3CG,EAAAA,EAAAA,MAAA,OAAKD,UAAU,eAAcF,SAAA,EACzBD,EAAAA,EAAAA,KAAA,OAAKG,UAAU,oBAAmBF,SAC/BH,KAEHM,EAAAA,EAAAA,MAAA,OAAKD,UAAU,cAAaF,SAAA,EAC1BD,EAAAA,EAAAA,KAAA,OAAKG,UAAU,2BAA0BF,UACvCD,EAAAA,EAAAA,KAAA,OAAKK,IAAKR,EAAUS,IAAI,GAAGH,UAAU,uBAEvCH,EAAAA,EAAAA,KAAA,OAAKG,UAAU,4BAA2BF,UACxCD,EAAAA,EAAAA,KAAA,OAAKG,UAAU,sBAAqBF,UAClCD,EAAAA,EAAAA,KAAA,OAAKO,wBAAyB,CAAEC,OAAQT,kBAMhD,C,iFCqBR,UAtCA,WACE,OACEK,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACED,EAAAA,EAAAA,KAACS,EAAAA,EAAY,CAACX,MAAQ,iCAAiCY,SAAW,cAElEV,EAAAA,EAAAA,KAACW,EAAAA,EAAY,CACbf,KAAO,0CACPC,SAAW,gCACXC,MAAQ,gFACRC,QAAU,02BAGVC,EAAAA,EAAAA,KAACW,EAAAA,EACD,CACAd,SAAW,+BACXC,MAAQ,mEACRC,QAAU,qkCAGVC,EAAAA,EAAAA,KAACW,EAAAA,EAAY,CACbf,KAAO,2CACPC,SAAW,iCACXC,MAAQ,qFACRC,QAAU,82CAGVC,EAAAA,EAAAA,KAACW,EAAAA,EAAY,CACbf,KAAO,4CACPC,SAAW,kCACXC,MAAQ,wFACRC,QAAU,0yDAMhB,C","sources":["Component/ProjectPanel/index.jsx","Component/Projects/FederatedLearningandSystems.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './projectPanel.css'\n\nconst ProjectPanel = ( {link, imageURL, title, content} ) => (\n  <div>\n    <a href={ link } className='projectContainer'>\n      <div className='projectPanel'>\n          <div className='projectPanelTitle'>\n            {title}\n          </div>\n          <div className='projectFlex'>\n            <div className='projectPanelImgContainer'>\n              <img src={imageURL} alt=\"\" className='projectPanelImg'/>\n            </div>\n            <div className='projectPanelTextContainer'>\n              <div className='projectPanelContent'>\n                <div dangerouslySetInnerHTML={{ __html: content }}></div>\n              </div>\n            </div>\n          </div>\n      </div>\n    </a>\n  </div>\n);\nexport default ProjectPanel;","import React from 'react'\nimport ContentTitle from '../ContentTitle'\nimport './project.css'\nimport ProjectPanel from '../ProjectPanel'\n\nfunction FederatedLearningandSystems() {\n  return (\n    <div>\n      <ContentTitle title = \"Federated Learning and Systems\" subtitle = \"Research\"></ContentTitle>\n      \n      <ProjectPanel \n      link = \"./#/FederatedLearningandSystems/FedAIoT\"\n      imageURL = \"./images/projects/FedAIoT.svg\"\n      title = \"FedAIoT: A Federated Learning Benchmark for Artificial Intelligence of Things\"\n      content = \"There is a significant relevance of federated learning (FL) in the realm of Artificial Intelligence of Things (AIoT). However, most existing FL works are not conducted on datasets collected from authentic IoT devices that capture unique modalities and inherent challenges of IoT data. In this work, we introduce FedAIoT, an FL benchmark for AIoT to fill this critical gap. FedAIoT includes eight datatsets collected from a wide range of IoT devices. These datasets cover unique IoT modalities and target representative applications of AIoT. FedAIoT also includes a unified end-to-end FL framework for AIoT that simplifies benchmarking the performance of the datasets. Our benchmark results shed light on the opportunities and challenges of FL for AIoT. We hope FedAIoT could serve as an invaluable resource to foster advancements in the important field of FL for AIoT.\"\n      ></ProjectPanel>\n      \n      <ProjectPanel \n      // link = \"./#/FederatedLearningandSystems/GPT-FL\"\n      imageURL = \"./images/projects/GPT-FL.svg\"\n      title = \"GPT-FL: Generative Pre-trained Model-Assisted Federated Learning\"\n      content = \"In this work, we propose GPT-FL, a generative pre-trained model-assisted federated learning (FL) framework. At its core, GPT-FL leverages generative pre-trained models to generate diversified synthetic data. These generated data are used to train a downstream model on the server, which is then fine-tuned with private client data under the standard FL framework. We show that GPT-FL consistently outperforms state-of-the-art FL methods in terms of model test accuracy, communication efficiency, and client sampling efficiency. Through comprehensive ablation analysis, we discover that the downstream model generated by synthetic data plays a crucial role in controlling the direction of gradient diversity during FL training, which enhances convergence speed and contributes to the notable accuracy boost observed with GPT-FL. Also, regardless of whether the target data falls within or outside the domain of the pre-trained generative model, GPT-FL consistently achieves significant performance gains, surpassing the results obtained by models trained solely with FL or synthetic data.\"\n      ></ProjectPanel>\n\n      <ProjectPanel \n      link = \"./#/FederatedLearningandSystems/FedRolex\"\n      imageURL = \"./images/projects/FedRolex.svg\"\n      title = \"FedRolex: Model-Heterogeneous Federated Learning with Rolling Sub-Model Extraction\"\n      content = \"Most cross-device federated learning (FL) studies focus on the model-homogeneous setting where the global server model and local client models are identical. However, such constraint not only excludes low-end clients who would otherwise make unique contributions to model training but also restrains clients from training large models due to on-device resource bottlenecks. In this work, we propose FedRolex, a partial training (PT)-based approach that enables model-heterogeneous FL and can train a global server model larger than the largest client model. At its core, FedRolex employs a rolling sub-model extraction scheme that allows different parts of the global server model to be evenly trained, which mitigates the client drift induced by the inconsistency between individual client models and server model architectures. We show that FedRolex outperforms state-of-the-art PT-based model-heterogeneous FL methods (e.g. Federated Dropout) and reduces the gap between model-heterogeneous and model-homogeneous FL, especially under the large-model large-dataset regime. In addition, we provide theoretical statistical analysis on its advantage over Federated Dropout and evaluate FedRolex on an emulated real-world device distribution to show that FedRolex can enhance the inclusiveness of FL and boost the performance of low-end devices that would otherwise not benefit from FL.\"\n      ></ProjectPanel>\n\n      <ProjectPanel \n      link = \"./#/FederatedLearningandSystems/PyramidFL\"\n      imageURL = \"./images/projects/PyramidFL.svg\"\n      title = \"PyramidFL: A Fine-grained Client Selection Framework for Efficient Federated Learning\"\n      content = \"Federated learning (FL) is an emerging distributed machine learning (ML) paradigm with enhanced privacy, aiming to achieve a good ML model for as many as participants while consuming as little as wall clock time. By executing across thousands or even millions of clients, FL demonstrates heterogeneous statistical characteristics and system divergence widely across participants, making its training suffer when adopting the traditional ML paradigm. The root cause of the training efficiency degradation is the random client selection criteria. Although existing FL paradigms propose several optimization schemes for client selection, they are still coarse-grained due to their under-exploitation on the clients' data and system heterogeneity, yielding sub-optimal performance for a variety of FL applications. In this work, we propose PyramidFL to speed up the FL training while achieving a higher final model performance (i.e., time-to-accuracy). The core of PyramidFL is a fine-grained client selection, in which PyramidFL does not only focus on the divergence of those selected participants and non-selected ones for client selection but also fully exploits the data and system heterogeneity within selected clients to profile their utility more efficiently. Specifically, PyramidFL first determines the utility-based client selection from the global (i.e., server) view and then optimizes its utility profiling locally (i.e., client) for further client selection. In this way, we can prioritize the use of those clients with higher statistical and system utility consistently. In comparison with the state-of-the-art (i.e., Oort), our evaluation on the open-source FL benchmark shows that PyramidFL improves the final model accuracy by 3.68% -- 7.33%, with a speedup of 2.71 x -- 13.66X on the wall clock time consumption.\"\n      ></ProjectPanel>\n\n    </div>\n    \n  )\n}\n\nexport default FederatedLearningandSystems"],"names":["_ref","link","imageURL","title","content","_jsx","children","href","className","_jsxs","src","alt","dangerouslySetInnerHTML","__html","ContentTitle","subtitle","ProjectPanel"],"sourceRoot":""}